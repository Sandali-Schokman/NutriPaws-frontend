// src/pages/seller/SellerOrderDetail.js
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import { useAuth } from "../../context/AuthContext";
import { toast } from "react-toastify";
import jsPDF from "jspdf";
import "jspdf-autotable";
import nutripawsLogo from "../../assets/nutripawsLogoBase64";

function SellerOrderDetails() {
  const { orderId } = useParams(); // seller sub-order ID
  const { token } = useAuth();
  const navigate = useNavigate();
  const [order, setOrder] = useState(null);

  const fetchOrder = async () => {
    try {
      const res = await axios.get(`http://localhost:8080/api/seller-orders/${orderId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setOrder(res.data);
    } catch (err) {
      toast.error("Failed to fetch order details");
      navigate("/seller/orders");
    }
  };

  const updateStatus = async (newStatus) => {
    try {
      await axios.put(
        `http://localhost:8080/api/seller-orders/${orderId}/status`,
        JSON.stringify(newStatus),
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );
      toast.success(`Order updated to ${newStatus}`);
      fetchOrder();
    } catch (err) {
      toast.error("Failed to update order status");
    }
  };

  const exportInvoice = () => {
    if (!order) return;
    const doc = new jsPDF();

    doc.addImage(nutripawsLogo, "PNG", 14, 10, 30, 30);
    doc.setFontSize(20);
    doc.setTextColor(49, 171, 58);
    doc.text("NutriPaws Marketplace", 60, 25);
    doc.setTextColor(0, 0, 0);

    doc.setFontSize(14);
    doc.text("Seller Invoice", 14, 50);

    doc.setFontSize(11);
    doc.text(`Order ID: ${order.id}`, 14, 60);
    doc.text(`Buyer: ${order.buyerEmail}`, 14, 68);
    doc.text(`Seller: ${order.sellerEmail}`, 14, 76);

    if (order.createdAt) {
      doc.text(
        `Placed: ${new Date(order.createdAt.seconds * 1000).toLocaleString()}`,
        14,
        84
      );
    }

    const tableData = order.items.map((item) => [
      item.productName,
      item.quantity,
      `$${item.price.toFixed(2)}`,
      `$${(item.quantity * item.price).toFixed(2)}`,
    ]);

    doc.autoTable({
      head: [["Product", "Qty", "Price", "Subtotal"]],
      body: tableData,
      startY: 100,
    });

    const finalY = doc.lastAutoTable.finalY || 100;
    doc.setFontSize(12);
    doc.text(`Subtotal: $${order.subtotal.toFixed(2)}`, 14, finalY + 10);
    doc.text(`Commission Fee: $${order.commission.toFixed(2)}`, 14, finalY + 18);
    doc.text(`Seller Earnings: $${order.sellerEarnings.toFixed(2)}`, 14, finalY + 26);

    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text("Generated by NutriPaws Marketplace", 14, finalY + 40);

    doc.save(`seller_invoice_${order.id}.pdf`);
  };

  useEffect(() => {
    fetchOrder();
  }, [orderId]);

  if (!order) return <p className="p-6">Loading...</p>;

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <button
        onClick={() => navigate("/seller/orders")}
        className="mb-4 px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded"
      >
        ‚Üê Back to Orders
      </button>

      <div className="bg-white shadow rounded-lg p-6 border border-gray-200">
        <div className="flex justify-between mb-4">
          <h2 className="text-2xl font-bold text-[#31ab3a]">
            Order #{order.id}
          </h2>
          <span
            className={`px-3 py-1 rounded text-sm font-medium ${
              order.status === "CANCELLED"
                ? "bg-red-100 text-red-700"
                : order.status === "DELIVERED"
                ? "bg-green-100 text-green-700"
                : "bg-yellow-100 text-yellow-700"
            }`}
          >
            {order.status}
          </span>
        </div>

        <p className="text-sm text-gray-600 mb-2">
          <strong>Buyer:</strong> {order.buyerEmail}
        </p>

        <table className="w-full border text-left mb-4">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-2 border">Product</th>
              <th className="p-2 border">Qty</th>
              <th className="p-2 border">Price</th>
              <th className="p-2 border">Subtotal</th>
            </tr>
          </thead>
          <tbody>
            {order.items &&
              order.items.map((item, idx) => (
                <tr key={idx} className="hover:bg-gray-50">
                  <td className="p-2 border">{item.productName}</td>
                  <td className="p-2 border">{item.quantity}</td>
                  <td className="p-2 border">${item.price.toFixed(2)}</td>
                  <td className="p-2 border">
                    ${(item.price * item.quantity).toFixed(2)}
                  </td>
                </tr>
              ))}
          </tbody>
        </table>

        <div className="text-sm font-semibold text-gray-700 mb-4 space-y-1">
          <p>Subtotal: ${order.subtotal.toFixed(2)}</p>
          <p>Commission: ${order.commission.toFixed(2)}</p>
          <p className="text-[#31ab3a]">Seller Earnings: ${order.sellerEarnings.toFixed(2)}</p>
        </div>

        <div className="space-x-2">
          {order.status === "PENDING" && (
            <button
              onClick={() => updateStatus("CONFIRMED")}
              className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded"
            >
              Confirm
            </button>
          )}
          {["PENDING", "CONFIRMED"].includes(order.status) && (
            <button
              onClick={() => updateStatus("SHIPPED")}
              className="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded"
            >
              Ship
            </button>
          )}
          {order.status !== "CANCELLED" && order.status !== "DELIVERED" && (
            <button
              onClick={() => updateStatus("CANCELLED")}
              className="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded"
            >
              Cancel
            </button>
          )}
          <button
            onClick={exportInvoice}
            className="px-4 py-2 bg-[#fe9f23] hover:bg-orange-600 text-white rounded"
          >
            Export Invoice
          </button>
        </div>
      </div>
    </div>
  );
}

export default SellerOrderDetails;
