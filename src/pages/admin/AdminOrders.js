import React, { useEffect, useState } from "react";
import axios from "axios";
import { useAuth } from "../../context/AuthContext";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";
import jsPDF from "jspdf";
import "jspdf-autotable";
import { getAuth } from "firebase/auth";

function AdminOrders() {
  const { token } = useAuth();
  const [orders, setOrders] = useState([]);
  const [totalCommission, setTotalCommission] = useState(0);
  const navigate = useNavigate();
  const user = getAuth().currentUser;

  const fetchOrders = async () => {
    try {
      const res = await axios.get("http://localhost:8080/api/orders", {
        headers: { Email: user.email },
      });
      setOrders(res.data);

      const sum = res.data.reduce(
        (acc, o) => acc + (o.totalCommission || 0),
        0
      );
      setTotalCommission(sum);
    } catch (err) {
      toast.error("Failed to fetch all orders");
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  // === Export All Orders to CSV ===
  const exportCSV = () => {
    if (orders.length === 0) return;

    let csv = "Order ID,Buyer,Status,Total,Commission,Shipping,Notes,Created,Updated\n";
    orders.forEach((o) => {
      csv += `${o.id},${o.buyerEmail},${o.status},${o.totalPrice},${o.totalCommission},${o.shippingAddress || ""},${o.notes || ""},${o.createdAt ? new Date(o.createdAt.seconds * 1000).toLocaleString() : ""},${o.updatedAt ? new Date(o.updatedAt.seconds * 1000).toLocaleString() : ""}\n`;
    });

    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "all_orders_admin.csv";
    link.click();
  };

  // === Export All Orders to PDF ===
  const exportPDF = () => {
    if (orders.length === 0) return;
    const doc = new jsPDF();

    doc.setFontSize(18);
    doc.setTextColor(49, 171, 58);
    doc.text("NutriPaws Marketplace", 14, 20);
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text("Admin Orders Report", 14, 30);

    doc.setFontSize(11);
    doc.text(`Total Commission: $${totalCommission.toFixed(2)}`, 14, 40);

    const tableData = orders.map((o) => [
      o.id,
      o.buyerEmail,
      o.status,
      `$${o.totalPrice?.toFixed(2)}`,
      `$${o.totalCommission?.toFixed(2)}`,
      o.createdAt ? new Date(o.createdAt.seconds * 1000).toLocaleString() : "N/A",
    ]);

    doc.autoTable({
      head: [["Order ID", "Buyer", "Status", "Total", "Commission", "Placed"]],
      body: tableData,
      startY: 50,
    });

    const finalY = doc.lastAutoTable.finalY || 60;
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text("Generated by NutriPaws Admin Panel", 14, finalY + 20);

    doc.save("all_orders_admin.pdf");
  };

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <h2 className="text-2xl font-bold text-[#31ab3a] mb-6">All Orders (Admin)</h2>

      <div className="mb-4 p-4 bg-white rounded shadow text-gray-700 flex justify-between items-center">
        <p className="text-lg font-semibold">
          Total Platform Commission: Rs. {totalCommission.toFixed(2)}
        </p>
        <div className="space-x-2">
          <button
            onClick={exportCSV}
            className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded"
          >
            Export CSV
          </button>
          <button
            onClick={exportPDF}
            className="px-4 py-2 bg-[#fe9f23] hover:bg-orange-600 text-white rounded"
          >
            Export PDF
          </button>
        </div>
      </div>

      {orders.length === 0 ? (
        <p className="text-gray-600">No orders found.</p>
      ) : (
        <div className="space-y-6">
          {orders.map((order) => (
            <div
              key={order.id}
              className="bg-white shadow rounded-lg p-6 border border-gray-200 hover:shadow-lg transition cursor-pointer"
              onClick={() => navigate(`/admin/orders/${order.id}`)}
            >
              <div className="flex justify-between mb-4">
                <h3 className="font-semibold text-lg text-[#fe9f23]">
                  Order #{order.id}
                </h3>
                <span
                  className={`px-3 py-1 rounded text-sm font-medium ${
                    order.status === "CANCELLED"
                      ? "bg-red-100 text-red-700"
                      : order.status === "DELIVERED"
                      ? "bg-green-100 text-green-700"
                      : "bg-yellow-100 text-yellow-700"
                  }`}
                >
                  {order.status}
                </span>
              </div>

              <p className="text-sm text-gray-600 mb-2">
                <strong>Buyer:</strong> {order.buyerEmail}
              </p>

              <div className="flex justify-between text-sm text-gray-700 mb-2">
                <p>
                  <strong>Total:</strong> ${order.totalPrice?.toFixed(2)}
                </p>
                <p>
                  <strong>Commission:</strong> ${order.totalCommission?.toFixed(2)}
                </p>
                <p>
                  <strong>Placed:</strong>{" "}
                  {order.createdAt
                    ? new Date(order.createdAt.seconds * 1000).toLocaleString()
                    : "N/A"}
                </p>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default AdminOrders;
