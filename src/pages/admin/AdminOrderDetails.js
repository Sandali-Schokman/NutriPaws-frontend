import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import { useAuth } from "../../context/AuthContext";
import { toast } from "react-toastify";
import jsPDF from "jspdf";
import "jspdf-autotable";

function AdminOrderDetails() {
  const { orderId } = useParams();
  const { token } = useAuth();
  const navigate = useNavigate();

  const [parentOrder, setParentOrder] = useState(null);
  const [subOrders, setSubOrders] = useState([]);

  const fetchOrder = async () => {
    try {
      const res = await axios.get(
        `http://localhost:8080/api/admin/orders/${orderId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setParentOrder(res.data.parentOrder);
      setSubOrders(res.data.subOrders);
    } catch (err) {
      toast.error("Failed to fetch order details");
      navigate("/admin/orders");
    }
  };

  useEffect(() => {
    fetchOrder();
  }, [orderId]);

  // === CSV Export ===
  const exportCSV = () => {
    if (!parentOrder) return;

    let csv = `Parent Order ID,Buyer,Status,Total,Total Commission,Shipping,Notes,Created,Updated\n`;
    csv += `${parentOrder.id},${parentOrder.buyerEmail},${parentOrder.status},${parentOrder.totalPrice},${parentOrder.totalCommission},${parentOrder.shippingAddress || ""},${parentOrder.notes || ""},${parentOrder.createdAt ? new Date(parentOrder.createdAt.seconds * 1000).toLocaleString() : ""},${parentOrder.updatedAt ? new Date(parentOrder.updatedAt.seconds * 1000).toLocaleString() : ""}\n\n`;

    csv += "Sub-Order ID,Seller,Buyer,Status,Subtotal,Commission,Earnings\n";
    subOrders.forEach((s) => {
      csv += `${s.id},${s.sellerEmail},${s.buyerEmail},${s.status},${s.subtotal},${s.commission},${s.sellerEarnings}\n`;
    });

    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `admin_order_${parentOrder.id}.csv`;
    link.click();
  };

  // === PDF Export ===
  const exportPDF = () => {
    if (!parentOrder) return;
    const doc = new jsPDF();

    doc.setFontSize(18);
    doc.setTextColor(49, 171, 58);
    doc.text("NutriPaws Marketplace", 14, 20);
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text("Admin Order Report", 14, 30);

    doc.setFontSize(11);
    doc.text(`Parent Order ID: ${parentOrder.id}`, 14, 40);
    doc.text(`Buyer: ${parentOrder.buyerEmail}`, 14, 48);
    doc.text(`Status: ${parentOrder.status}`, 14, 56);
    doc.text(`Total: $${parentOrder.totalPrice.toFixed(2)}`, 14, 64);
    doc.text(`Total Commission: $${parentOrder.totalCommission.toFixed(2)}`, 14, 72);

    // Sub-orders Table
    const tableData = subOrders.map((s) => [
      s.id,
      s.sellerEmail,
      s.buyerEmail,
      s.status,
      `${s.subtotal.toFixed(2)}`,
      `$${s.commission.toFixed(2)}`,
      `$${s.sellerEarnings.toFixed(2)}`
    ]);

    doc.autoTable({
      head: [["Sub-Order ID", "Seller", "Buyer", "Status", "Subtotal", "Commission", "Earnings"]],
      body: tableData,
      startY: 85,
    });

    const finalY = doc.lastAutoTable.finalY || 100;
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text("Generated by NutriPaws Admin Panel", 14, finalY + 20);

    doc.save(`admin_order_${parentOrder.id}.pdf`);
  };

  if (!parentOrder) return <p className="p-6">Loading...</p>;

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <button
        onClick={() => navigate("/admin/orders")}
        className="mb-4 text-blue-600 hover:underline"
      >
        ‚Üê Back to Orders
      </button>

      <div className="bg-white shadow rounded-lg p-6 mb-6">
        <h2 className="text-2xl font-bold text-[#31ab3a] mb-4">
          Parent Order #{parentOrder.id}
        </h2>

        <div className="grid grid-cols-2 gap-4 text-sm text-gray-700">
          <p><strong>Buyer:</strong> {parentOrder.buyerEmail}</p>
          <p><strong>Status:</strong> {parentOrder.status}</p>
          <p><strong>Total:</strong> Rs. {parentOrder.totalPrice.toFixed(2)}</p>
          <p><strong>Total Commission:</strong> Rs. {parentOrder.totalCommission.toFixed(2)}</p>
          <p><strong>Shipping:</strong> {parentOrder.shippingAddress || "N/A"}</p>
          <p><strong>Notes:</strong> {parentOrder.notes || "None"}</p>
        </div>
      </div>

      <h3 className="text-xl font-semibold mb-4">Seller Sub-Orders</h3>
      {subOrders.length === 0 ? (
        <p className="text-gray-600">No sub-orders found.</p>
      ) : (
        <div className="space-y-6">
          {subOrders.map((sub) => (
            <div key={sub.id} className="bg-white shadow rounded-lg p-6 border">
              <h4 className="font-semibold text-[#fe9f23] mb-2">Sub-Order #{sub.id}</h4>
              <p><strong>Seller:</strong> {sub.sellerEmail}</p>
              <p><strong>Buyer:</strong> {sub.buyerEmail}</p>
              <p><strong>Subtotal:</strong> ${sub.subtotal.toFixed(2)}</p>
              <p><strong>Commission:</strong> ${sub.commission.toFixed(2)}</p>
              <p><strong>Earnings:</strong> ${sub.sellerEarnings.toFixed(2)}</p>
            </div>
          ))}
        </div>
      )}

      {/* Export Actions */}
      <div className="flex justify-end mt-6 space-x-3">
        <button
          onClick={exportCSV}
          className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded"
        >
          Export CSV
        </button>
        <button
          onClick={exportPDF}
          className="px-4 py-2 bg-[#fe9f23] hover:bg-orange-600 text-white rounded"
        >
          Export PDF
        </button>
      </div>
    </div>
  );
}

export default AdminOrderDetails;

